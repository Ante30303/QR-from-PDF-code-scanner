import os
import pathlib
import shutil
from datetime import date
import glob

import cv2
from pdf2image import convert_from_path
from PIL import Image
from PyPDF2 import PdfMerger
from pyzbar import pyzbar

pdf_input_mapa = glob.glob('input pdf/*.pdf')

for pdf_input in pdf_input_mapa:
    pdfs = pdf_input
    pages = convert_from_path(pdfs, 350)


    def skeniraj_qr_kod(filename):
        """Skenira sliku, te očitava qr kod"""
        try:
            # Učitaj sliku
            image = cv2.imread(filename)

            # Lociraj barkod i dekodiraj ga
            barcodes = pyzbar.decode(image)

            for barcode in barcodes:
                (x, y, w, h) = barcode.rect
                cv2.rectangle(image, (x, y), (x + w, y + h), (0, 0, 255), 2)
                barcodeData = barcode.data.decode("utf-8")
                barcodeType = barcode.type

                # Ispiši bar kod u terminalu
                print("[INFO] Found {} barcode: {}".format(barcodeType, barcodeData))

                if barcodeData[:7] == "WARNING":
                    return False

            return barcodeData.replace("\n", "_")
        except:
            return False


    def merge_pdf(conv_slike, broj_mape):
        # Slike iz mape mergamo u pdf file
        conv_slike[0].save(f'./temp1.pdf', save_all=True, append_images=conv_slike[1:])

        # Posto cemo trenutni fajl trebat mergat sa temp fajlom i zadrzati originalno ime fajla, ovdje mu nakratko mijenjamo ime
        os.rename(f"{lista_qr_kodova[broj_mape-2]}.pdf", f"{lista_qr_kodova[broj_mape-2]}1.pdf")
        merger = PdfMerger()
        # Mergamo fajl sa promjenjenim imenom i temp1.pdf fajl
        merger.append(f"{lista_qr_kodova[broj_mape-2]}1.pdf")
        merger.append("temp1.pdf")
        # Stvaramo mergani pdf sa originalnim imenom
        merger.write(f"{lista_qr_kodova[broj_mape-2]}.pdf")
        merger.close()

        # Obrisati viska datoteke i mape
        os.remove(f"{lista_qr_kodova[broj_mape-2]}1.pdf")
        os.remove("temp1.pdf")
        shutil.rmtree(f"Obrazac_{broj_mape-1}")


    def slike_u_pdf(broj_mape, lista_qr_kodova):
        slike_u_obr = list(pathlib.Path(os.getcwd()).glob(f'**/Obrazac_{broj_mape-1}/*.jpg'))
        conv_slike = []

        for slika in slike_u_obr:
            sl = Image.open(slika)
            conv_slike.append(sl.convert('RGB'))

        print(lista_qr_kodova)
        if os.path.exists(f"{lista_qr_kodova[broj_mape-2]}.pdf"):
            # Ako postoji pdf file sa istim ID-em, mergamo ih
            merge_pdf(conv_slike, broj_mape)
        else:
            # Slike iz mape mergamo u pdf file te brišemo tu mapu
            conv_slike[0].save(f'./{lista_qr_kodova[broj_mape-2]}.pdf', save_all=True, append_images=conv_slike[1:])
            shutil.rmtree(f"Obrazac_{broj_mape-1}")


    Broj_stranice = 1
    broj_obrasca = 1
    preskoci_prvi = False
    trenutni_path = str(os.getcwd())
    lista_qr_kodova = []

    # Napravi mapu u trenutnom path-u
    os.mkdir(trenutni_path + f"\Obrazac_{broj_obrasca}")
    for page in pages:
        image_name = "Page_" + str(Broj_stranice) + ".jpg"
        page.save(f"Obrazac_{broj_obrasca}\\{image_name}", "JPEG")
        qr_rez = skeniraj_qr_kod(f"Obrazac_{broj_obrasca}\\Page_{Broj_stranice}.jpg")

        # Ako postoji QR kod sprema ga u listu
        if qr_rez:
            lista_qr_kodova.append(qr_rez)
            print(lista_qr_kodova)
        
        # Svi QR kodovi nakon prvog
        if qr_rez and preskoci_prvi:
            broj_obrasca += 1
            # Kreiram novu mapu za obrazce
            os.mkdir(trenutni_path + f"\Obrazac_{broj_obrasca}")
            # Sliku sa Qr kodom premještam u novokreiranu mapu
            shutil.move(f"./Obrazac_{broj_obrasca-1}/{image_name}", f"./Obrazac_{broj_obrasca}/{image_name}")
            slike_u_pdf(broj_obrasca, lista_qr_kodova)
        preskoci_prvi = True
        Broj_stranice += 1

    broj_obrasca += 1
    slike_u_pdf(broj_obrasca, lista_qr_kodova)

    svi_pdfovi = glob.glob('*.pdf')
    print(svi_pdfovi[0])

    today = date.today()
    # Ako ne postoje, napraviti mape godina - mjesec - dan
    pathlib.Path(f'{os.getcwd()}\\{today.year}\\{today.month:02d}\\{today.day:02d}').mkdir(parents=True, exist_ok=True) 
    for pdf in svi_pdfovi:
        shutil.move(f"{os.getcwd()}\\{pdf}", f"{os.getcwd()}\\{today.year}\\{today.month:02d}\\{today.day:02d}\\{pdf}")
    


